{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","alt","poster","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","MovieRating","_ref4","rating","Movie","_ref","title","genres","synopsis","map","index","key","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","console","log","setState","stop","fetch","then","response","json","data","catch","err","_renderMovies","movie","src_Movie","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAwBA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,OAC1B,OAAOC,EAAAC,EAAAC,cAAA,OAAKJ,IAAKA,EAAKK,IAAKJ,EAAQK,UAAU,kBAG/C,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOP,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAgBG,EAAhC,KAGT,SAASC,EAATC,GAAiC,IAAVC,EAAUD,EAAVC,OACrB,OAAOV,EAAAC,EAAAC,cAAA,uBAAeQ,EAAf,SAmBMC,MAhDf,SAAAC,GAA4D,IAA3CC,EAA2CD,EAA3CC,MAAOH,EAAoCE,EAApCF,OAAQX,EAA4Ba,EAA5Bb,OAAQe,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,SAC9C,OACEf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,IAAKe,EAAOd,OAAQA,KAEnCC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,UAAKW,GACLb,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACM,EAAD,CAAaE,OAAQA,KACzBV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACZU,EAAOE,IAAI,SAACT,EAAOU,GAAR,OACVjB,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOW,IAAKD,OAGnCjB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAAmBW,MCiCzBI,6MA7CbC,MAAQ,KAMRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXC,QAAQC,IAAIV,EAAO,IACnBM,EAAKK,SAAS,CAAEX,WAHL,wBAAAG,EAAAS,SAAAb,QAMbQ,SAAW,WACT,OAAOM,MAAM,yDACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKjB,SACvBkB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAE9BC,cAAgB,WAcZ,OAZed,EAAKT,MAAMG,OAAOP,IAAI,SAAA4B,GACnC,OACE5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEhC,MAAO+B,EAAM/B,MACbH,OAAQkC,EAAMlC,OACdX,OAAQ6C,EAAME,mBACd5B,IAAK0B,EAAMG,GACXjC,OAAQ8B,EAAM9B,OACdC,SAAU6B,EAAM7B,iGAzBxBiC,KAAK3B,8CAkCL,OACErB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZ4C,KAAK5B,MAAMG,OAASyB,KAAKL,gBAAkB,kBAxClCM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.93e94133.chunk.js","sourcesContent":["import React from 'react'\nimport './Movie.css'\nimport PropTypes from 'prop-types'\n\nfunction Movie({ title, rating, poster, genres, synopsis }) {\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Columns\">\n        <MoviePoster alt={title} poster={poster}/>\n      </div>\n      <div className=\"Movie__Columns\">\n        <h1>{title}</h1>\n        <h2><MovieRating rating={rating}/></h2>\n        <div className=\"Movie__genres\">\n          {genres.map((genre, index) => (\n            <MovieGenre genre={genre} key={index}/>\n          ))}\n        </div>\n        <p className=\"Movie__Synopsis\">{synopsis}</p>\n      </div>\n    </div>\n  )\n}\n\nfunction MoviePoster({ alt, poster }) {\n  return <img alt={alt} src={poster} className=\"Movie__Poster\"/>\n}\n\nfunction MovieGenre({ genre }) {\n  return <span className=\"Movie__Genre\">{genre} </span>\n}\n\nfunction MovieRating({ rating }) {\n  return <div>Rating : {rating} / 10</div>\n}\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired,\n}\n\nMoviePoster.propTypes = {\n  alt: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired,\n}\n\nexport default Movie\n","import React, { Component } from 'react'\n\nimport './App.css'\nimport Movie from './Movie'\n\nclass App extends Component {\n  state = {}\n\n  componentDidMount() {\n    this._getMovies()\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    console.log(movies[0])\n    this.setState({ movies })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n  _renderMovies = () => {\n    {\n      const movies = this.state.movies.map(movie => {\n        return (\n          <Movie\n            title={movie.title}\n            rating={movie.rating}\n            poster={movie.medium_cover_image}\n            key={movie.id}\n            genres={movie.genres}\n            synopsis={movie.synopsis}\n          />\n        )\n      })\n      return movies\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}